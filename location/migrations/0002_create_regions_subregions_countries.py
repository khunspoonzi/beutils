# Generated by Django 3.1.1 on 2021-02-18 07:32

# ┌────────────────────────────────────────────────────────────────────────────────────┐
# │ GENERAL IMPORTS                                                                    │
# └────────────────────────────────────────────────────────────────────────────────────┘

import os

# ┌────────────────────────────────────────────────────────────────────────────────────┐
# │ DJANGO IMPORTS                                                                     │
# └────────────────────────────────────────────────────────────────────────────────────┘

from django.db import migrations

# ┌────────────────────────────────────────────────────────────────────────────────────┐
# │ PROJECT IMPORTS                                                                    │
# └────────────────────────────────────────────────────────────────────────────────────┘

from beutils.tools import read_json, slugify


# ┌────────────────────────────────────────────────────────────────────────────────────┐
# │ CREATE REGIONS, SUBREGIONS, COUNTRIES                                              │
# └────────────────────────────────────────────────────────────────────────────────────┘


def create_regions_subregions_countries(apps, schema_editor):
    """ Creates Region, Subregion, and Country objects from fixtures """

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ GET MODELS                                                                     │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Get Region, Subregion, and Country models
    Region = apps.get_model("beutils_location", "Region")
    Subregion = apps.get_model("beutils_location", "Subregion")
    Country = apps.get_model("beutils_location", "Country")

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ GET DATA                                                                       │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Define fixture directory
    file_directory = "beutils/location/fixtures/"

    # Define country file name
    file_name = "countries.json"

    # Read country fixture file
    countries = read_json(os.path.join(file_directory, file_name))

    # Return if file not found
    if not countries:
        return

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ CLEAN DATA                                                                     │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Extract regions and subregions
    regions = {c["region"] for c in countries}
    subregions = {(c["subregion"], c["region"]) for c in countries}

    # Order regions, subregions, and countries by name
    regions = sorted(list(regions), key=lambda x: slugify(x))
    subregions = sorted(list(subregions), key=lambda x: slugify(x[0]))
    countries = sorted(countries, key=lambda x: slugify(x["name"]))

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ DEFINE REGION EMOJIS                                                           │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Defime region emoji map
    region_emoji_map = {
        "Africa": ("🌍", "U+1F30D"),
        "Americas": ("🌎", "U+1F30E"),
        "Antarctica": ("🇦🇶", "U+1F1E6 U+1F1F6"),
        "Asia": ("🌏", "U+1F30F"),
        "Europe": ("🌍", "U+1F30D"),
        "Oceania": ("🌏", "U+1F30F"),
    }

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ CREATE REGIONS                                                                 │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Initialize region map
    region_map = {}

    # Iterate over regions
    for region in regions:

        # Get emojis
        emoji, emoji_u = region_emoji_map[region]

        # Create region object
        region_obj = Region.objects.create(
            name=region, slug=slugify(region), emoji=emoji, emoji_u=emoji_u
        )

        # Add region to map
        region_map[region] = region_obj.pk

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ CREATE SUBREGIONS                                                              │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Initialize subregion map
    subregion_map = {}

    # Iterate over subregions
    for subregion, region in subregions:

        # Create subregion object
        subregion_obj = Subregion.objects.create(
            name=subregion, slug=slugify(subregion), region_id=region_map[region]
        )

        # Add subregion to map
        subregion_map[subregion] = subregion_obj.pk

    # ┌────────────────────────────────────────────────────────────────────────────────┐
    # │ CREATE COUNTRIES                                                               │
    # └────────────────────────────────────────────────────────────────────────────────┘

    # Initialize countries to create
    countries_to_create = []

    # Iterate over countries
    for country in countries:

        # Get region ID
        region_id = region_map[country["region"]]

        # Get subregion ID
        subregion_id = subregion_map[country["subregion"]]

        # Get country name
        country_name = country["name"]
        country_name_official = country["name_official"]
        country_name_native = country["name_native"]

        # Initialize country object
        country_obj = Country(
            region_id=region_id,
            subregion_id=subregion_id,
            name=country_name,
            slug=slugify(country_name),
            name_official=country_name_official,
            slug_official=slugify(country_name_official),
            name_native=country_name_native,
            iso2=country["iso2"].upper(),
            iso3=country["iso3"].upper(),
            phone_codes=country["phone_codes"],
            demonym=country["demonym"],
            is_nationality=country["is_nationality"],
            emoji=country["emoji"],
            emoji_u=country["emoji_u"],
        )

        # Add country object to countries to create
        countries_to_create.append(country_obj)

    # Bulk create countries to create
    Country.objects.bulk_create(countries_to_create)


# ┌────────────────────────────────────────────────────────────────────────────────────┐
# │ MIGRATION                                                                          │
# └────────────────────────────────────────────────────────────────────────────────────┘


class Migration(migrations.Migration):

    dependencies = [
        ("beutils_location", "0001_initial"),
    ]

    operations = [migrations.RunPython(create_regions_subregions_countries)]
